// // Harmony of the Spheres Draft
// // Nathan Ã“ Maoilearca 2020

//visuals
let sun, planets = [], radii = [], e = 15.36, planetRadii = [50, 15, 20, 30],
planetColours = [], tempPlanetSpecs = [];
//sounds
let playing = false, oscillators = [], frequencies = [],
soundLoop, intervalInSeconds = 60;;
//maths
let gConst = 0.01, slider, tempPlanet = false, pulse = 0, angleNewPlanet;

function setup(){
  createCanvas(windowWidth, windowHeight);
  //soundLoop temporarily set to loop every minute and
  soundLoop = new p5.SoundLoop(onSoundLoop, intervalInSeconds);
  soundLoop.start();

  for (i = 0; i < 4; i++) {
// arguments:              x ,           y,             m, radius,         g,      eccentricty
  planets.push(new Planet((i * 0.2) + 1, (i * 0.2) + 1, 1, planetRadii[i], gConst, e - i));
  oscillators.push(new p5.Oscillator('sine'));
  radii.push(new Radius());
  }
  //gravity slider (gConst)
  gravity = createSlider(0.0005, 0.5, gConst, 0.00001);
  gConst = gravity.value();
  sun = new Sun(width/2, height/2, 33000, gConst);
}

function draw(){
  background(45, 35, 35);
  let radiusLines;
//display planets, sun, radius lines & apply gravity
  for (i = 0; i < planets.length; i++) {
    planets[i].show();
    planets[i].move();
    sun.attract(planets[i]);
    oscillators[i].freq(frequencies[i]);
    oscillators[i].amp(0.5/planets.length);
    radii[i].show(sun, planets[i]);
    radiusLines = line(sun.pos.x, sun.pos.y, planets[i].pos.x, planets[i].pos.y);
    }
  sun.show();
// create a new temporary planet when one is selected
  if (tempPlanet == true) {
    createTempPlanet();
  }
}

function createTempPlanet(){
  tempPlanetPulse();
  tempPlanetAngle();
}

function tempPlanetPulse() {
  let pulsing = sin(pulse += 0.05);
  stroke(145);
  fill(245, 150)
  strokeWeight(2);
  ellipse(mouseX, mouseY, tempPlanetSpecs[0] + pulsing*5);
}
function tempPlanetAngle(){
  let v2 = createVector(width/2, 0);
  let v1 = createVector(mouseX - width/2, mouseY - height/2);
  let angleBetween = v1.angleBetween(v2);
  if (angleBetween < 0) {
    angleNewPlanet = angleBetween  + TWO_PI;
  } else {angleNewPlanet = angleBetween};
}

function onSoundLoop(){
  for (let i = 0; i < planets.length; i++){
    oscillators[i].start();
  }
}

function mousePressed(){
  if (playing == true) {
    playing = false
    for (let i = 0; i < planets.length; i++){
      oscillators[i].stop();
    }
  } else {
    playing = true;
    onSoundLoop();
  }

  for (let i = 0; i < planets.length; i++){
    if (dist(mouseX, mouseY, planets[i].pos.x, planets[i].pos.y) < planets[i].r){
      tempPlanetSpecs.push(planets[i].r);
      planets.splice(i, 1);
      setTimeout(timer, 10);
    }
  }
  if (tempPlanet == true) {
    resetPlanet();
  }
}

function timer() {
  tempPlanet = true;
}

function resetPlanet() {
// push a new planet into the planets array, with the same specs as the one spliced
  planets.push(new Planet(1, 1, 1, tempPlanetSpecs[0], gConst, e - 5, mouseX - width/2, mouseY - height/2, angleNewPlanet));
  tempPlanet = false;
  tempPlanetSpecs.length = 0;
}

class Radius {
  show(sun, planet) {
    strokeWeight(2);
    stroke(232, 40);
    line(sun.pos.x, sun.pos.y, planet.pos.x, planet.pos.y);
  }
}

class Sun {
   constructor(x, y, m, g) {
     this.pos = createVector(x, y);
     this.mass = m;
     this.r = sqrt(this.mass) / 8;
     this.g = g
   }

   show() {
    noStroke();
    fill(235, 204, 48);
    ellipse(this.pos.x, this.pos.y, this.r*2);
   }

   attract(planet){
     let force = p5.Vector.sub(this.pos, planet.pos);
     let distance = force.mag();
     let distanceSq = force.magSq();
     let strength = this.g * (this.mass * planet.mass) / distanceSq;
     force.setMag(strength);
     planet.applyForce(force);
     }
}

class Planet {
  constructor(x, y, m, r, g, e, mX, mY, a){
    //creates a random angle within unit circle
    let randomAngle = random(TWO_PI);
    //set X and Y coordinates on unit circle accordingly
    this.randAngleX = cos(a) || cos(randomAngle);
    this.initialX = mX || this.randAngleX * 140;
    this.randAngleY = - sin(a) || sin(randomAngle);
    this.initialY = mY || this.randAngleY * 140;
    // set coordinates to planet pos
    this.pos = createVector(width/2 +(this.initialX * x), height/2 + (this.initialY * y));
    // set initial ang velocity based on initial angle
    this.vel = createVector(sqrt(g) * e * -this.randAngleY, sqrt(g) * e * this.randAngleX);
    this.acc = createVector(0, 0);
    this.mass = m;
    this.r = r;
  }

  applyForce(force) {
    let f = p5.Vector.div(force, this.mass);
    this.acc.add(f);
  }

  move(){
    this.vel.add(this.acc);
    this.pos.add(this.vel);
    this.acc.set(0, 0);
  }

  show(){
    stroke(145);
    fill(245, 150)
    strokeWeight(2);
    ellipse(this.pos.x, this.pos.y, this.r);
  }
}
